req "lib/brood/brood" as brood;

use brood::suite;

suite("Control statements", |s| {
  s.describe("if branches", |t| {
    let v = true;

    if v {
      t.expect(v).to_be(true);
    } else {
      t.fail("if branched to wrong path");
    }

    if !v {
      t.fail("if branched to wrong path");
    } else {
      t.expect(v).to_be(true);
    }
  });

  s.describe("while loops", |t| {
    let n = 5;
    let i = 0;
    while i < n {
      i += 1;
    }

    t.expect(i).to_be(n);
  });

  s.describe("for loops", |t| {
    let n = 5;
    let i = 0;
    let total = 0;

    for let i = 0; i < n; i += 1 {
      total += i;
    }

    t.expect(i).to_be(0);
    t.expect(total).to_be(10);
  });

  s.describe("loops", |t| {
    let i = 0;
    let n = 5;
    loop {
      i += 1;
      if i == n {
        break;
      }
    }

    t.expect(i).to_be(n);
  });

  fn recursive_fn(i) {
    if i >= 5 {
      ret i;
    }
    ret recursive_fn(i + 1);
  }

  s.describe("recursion", |t| {
    t.expect(recursive_fn(0)).to_be(5);
    t.expect(recursive_fn(10)).to_be(10);
  });

  s.describe("ands ors", |t| {
    t.expect(true and false or true).to_be(true);
    t.expect(true and false and false or true).to_be(true);
    t.expect(true and false and (false or true)).to_be(false);
    t.expect(true and false).to_be(false);
    t.expect(true and (true and (false or false))).to_be(false);
  });

  s.describe("continues", |t| {
    let n = 0;
    for let i = 0; i < 10; i += 1 {
      if i < 5 {
        cont;
      }
      n = i;
    }
  });
});
