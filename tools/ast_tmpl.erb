<%- for use in config.uses -%>
use <%= use %>;
<%- end -%>

pub enum <%= config.name %> {
<%- for impl in config.impl -%>
  <%= impl.name %>(Box<<%= impl.name %><%= config.name %>>),
<%- end -%>
}

impl <%= config.name %> {
  pub fn accept<R>(&self, visitor: &mut dyn Visitor<R>) -> R {
    match self {
    <%- for impl in config.impl -%>
      <%= config.name %>::<%= impl.name %>(x) => visitor.visit_<%= impl.name.underscore %>_<%= config.name.underscore %>(x),
    <%- end -%>
    }
  }
}

<% for impl in config.impl %>
pub struct <%= impl.name %><%= config.name %> {
<%- for m in impl.members -%>
  pub <%= m.name %>: <%= m.type %>,
<%- end -%>
}

impl <%= impl.name %><%= config.name %> {
  pub fn new(
  <% for m in impl.members %>
    <%= m.name %>: <%= m.type %>,
  <%- end -%>
  ) -> <%= impl.name %><%= config.name %> {
    <%= impl.name %><%= config.name %> {
    <%- for m in impl.members -%>
      <%= m.name %>,
    <%- end -%>
    }
  }
}
<% end %>

pub trait Visitor<R> {
<%- for impl in config.impl -%>
  fn visit_<%= impl.name.underscore %>_<%= config.name.underscore %>(&mut self, e: &<%= impl.name %><%= config.name %>) -> R;
<%- end -%>
}
