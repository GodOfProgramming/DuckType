<%- for use in config.uses -%>
use <%= use %>;
<%- end -%>

pub enum <%= config.name %> {
<%- for enum in config.enums -%>
  <%= enum.name %>(Box<<%= enum.struct_name %>>),
<%- end -%>
}

impl <%= config.name %> {
  pub fn accept<R>(&self, visitor: &mut dyn Visitor<R>) -> R {
    match self {
    <%- for enum in config.enums -%>
      <%= config.name %>::<%= enum.name %>(x) => visitor.<%= enum.visit_fn %>(x),
    <%- end -%>
    }
  }
}

<% for enum in config.enums %>
pub struct <%= enum.struct_name %> {
<%- for m in enum.members -%>
  pub <%= m.name %>: <%= m.type %>,
<%- end -%>
}

impl <%= enum.struct_name %> {
  pub fn new(
  <% for m in enum.members %>
    <%= m.name %>: <%= m.type %>,
  <%- end -%>
  ) -> Self {
    Self {
    <%- for m in enum.members -%>
      <%= m.name %>,
    <%- end -%>
    }
  }
}
<% end %>

pub trait Visitor<R> {
<%- for enum in config.enums -%>
  fn <%= enum.visit_fn %>(&mut self, e: &<%= enum.struct_name %>) -> R;
<%- end -%>
}
