program     		→ declaration* EOF ;

### Statements ###

declaration 		→ fun_decl | var_decl | statement ;
var_decl        → "var" IDENTIFIER ( "=" expression )? ";" ;
func_decl       → "fun" function ;
function        → IDENTIFIER "(" parameters? ")" block ;
parameters      → IDENTIFIER ( "," IDENTIFIER )* ;
statement   		→ expr_stmt | if_stmt | print_stmt | block ;
for_stmt        → "for" ( var_decl | expr_stmt ) ";" expression? ";" expression? block ;
while_stmt      → "while" expression block ;
if_stmt         → "if" expression block ( "else" block )? ;
block           → "{" declaration* "}"
expr_stmt 			→ expression ";" ;
print_stmt 			→ "print" expression ";" ;

### Expressions ###

### Lowest Precedence ###

expression 			→ literal | unary | binary | grouping ;
arguments       → expression ( "," expression )* ;
ternary         → assignment "?" expression ":" expression ;
assignment      → IDENTIFIER "=" assignment | range ;
range           → logical_or ".." logical_or ;
logical_or      → logic_and ( "or" logic_and )* ;
logic_and       → equality ( "and" equality )* ;
equality       	→ comparison ( ( "!=" | "==" ) comparison )* ;
comparison     	→ addition ( ( ">" | ">=" | "<" | "<=" ) addition )* ;
addition       	→ multiplication ( ( "-" | "+" ) multiplication )* ;
multiplication 	→ unary ( ( "/" | "*" ) unary )* ;
unary          	→ ( "!" | "-" ) unary | primary ;
call            → primary ( "(" arguments? ")" )* ;
primary        	→ NUMBER | STRING | "false" | "true" | "nil" | "(" expression ")" | IDENTIFIER ;

### Highest Precedence ###

### Glossary ###

Terminal 	    - Code to match and consume a token
Non-terminal	- Call to that rule’s function
|						  - If or switch statement
* or +  			- While or for loop
?	            - If statement
